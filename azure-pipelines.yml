# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - none

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: "9e76791c-a634-4b59-b379-8219e99036d0"
  containerRegistry: "devcontainerregistryre02.azurecr.io"
  tag: "latest"
  imagePullSecret: "devcontainerregistryre022029812b-auth"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
  - stage: Upload
    displayName: Upload Stage
    jobs:
      - job: upload_manifests
        displayName: Upload Manifests
        pool:
          vmImage: $(vmImageName)
        steps:
          - upload: ./.azuredevops/pipelines/manifests
            artifact: manifests

  - stage: Build
    displayName: Build Stage

    jobs:
      - job: build_company_course
        displayName: Build Company.Course
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Push Company.Course to Registry
            inputs:
              command: buildAndPush
              repository: "company-course"
              dockerfile: "**/Company.Course/Company.Course.Api/Dockerfile"
              buildContext: .
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

      - job: build_company_department
        displayName: Build Company.Department
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Push Company.Department to Registry
            inputs:
              command: buildAndPush
              repository: "company-department"
              dockerfile: "**/Company.Department/Company.Department.Api/Dockerfile"
              buildContext: .
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

      - job: build_company_employee
        displayName: Build Company.Employee
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Push Company.Employee to Registry
            inputs:
              command: buildAndPush
              repository: "company-employee"
              dockerfile: "**/Company.Employee/Company.Employee.Api/Dockerfile"
              buildContext: .
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

      - job: build_company_notification
        displayName: Build Company.Notification
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Push Company.Notification to Registry
            inputs:
              command: buildAndPush
              repository: "company-notification"
              dockerfile: "**/Company.Notification/Company.Notification.Api/Dockerfile"
              buildContext: .
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

      - job: build_microservices_catalogue
        displayName: Build Microservices.Catalogue
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Push Microservices.Catalogue to Registry
            inputs:
              command: buildAndPush
              repository: "microservices-catalogue"
              dockerfile: "**/Microservices.Catalogue/Dockerfile"
              buildContext: .
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy Stage
    dependsOn: Build

    jobs:
      - deployment: deploy_microservices
        displayName: Deploy Microservices
        pool:
          vmImage: $(vmImageName)
        environment: "dev-kubernetes-cluster-re02.default"

      - job: create_image_pull_secret
        displayName: Create imagePullSecret
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

      - job: deploy_company_course
        displayName: Build Company.Course
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy Company.Course to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment-company-course.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/company-course:$(tag)

      - job: deploy_company_department
        displayName: Deploy Company.Department
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy Company.Department to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment-company-department.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/company-department:$(tag)

      - job: deploy_company_employee
        displayName: Deploy Company.Employee
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy Company.Employee to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment-company-employee.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/company-employee:$(tag)

      - job: deploy_company_notification
        displayName: Deploy Company.Notification
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy Company.Notification to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment-company-notification.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/company-notification:$(tag)

      - job: deploy_microservices_catalogue
        displayName: Deploy Microservices.Catalogue
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy Microservices.Catalogue to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment-microservices-catalogue.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/microservices-catalogue:$(tag)
